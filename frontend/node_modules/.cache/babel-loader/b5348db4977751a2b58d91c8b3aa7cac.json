{"ast":null,"code":"import { csrfFetch } from \"./csrf\"; //GET ALL NOTES OF A USER\n\nconst GET_NOTES = \"notes/GET_NOTES\";\n\nconst getUserNotes = notes => ({\n  type: GET_NOTES,\n  payload: notes\n});\n\nexport const getUsersNotesThunk = () => async dispatch => {\n  const res = await csrfFetch('/api/notes');\n\n  if (res.ok) {\n    const allUsersNotes = await res.json();\n    dispatch(getUserNotes(allUsersNotes));\n  }\n}; // //GET A NOTE\n// const GET_NOTE = \"note/GET_NOTE\";\n// const getNote = (note) => ({\n//   type: GET_NOTE,\n//   payload: note,\n// });\n// export const getNoteThunk = (noteId) => async (dispatch) => {\n//   const res = await fetch('/api/notes');\n//   if (res.ok) {\n//     const note = await res.json();\n//     dispatch(getNote(note));\n//   }\n// };\n\nconst initialState = {};\nexport default function notesReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_NOTES:\n      {\n        // return { ...state, notes: action.payload };\n        const allNotes = {};\n        action.allUsersNotes.forEach(note => {\n          allNotes[note.id] = note;\n        });\n        return { ...allNotes\n        };\n      }\n    // case GET_NOTE: {\n    //   return { ...state, note: action.payload };\n    // }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["csrfFetch","GET_NOTES","getUserNotes","notes","type","payload","getUsersNotesThunk","dispatch","res","ok","allUsersNotes","json","initialState","notesReducer","state","action","allNotes","forEach","note","id"],"sources":["/Users/weiqi/Mod 5/solo-project/frontend/src/store/notes.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\n//GET ALL NOTES OF A USER\nconst GET_NOTES = \"notes/GET_NOTES\";\n\nconst getUserNotes = (notes) => ({\n  type: GET_NOTES,\n  payload: notes,\n});\n\nexport const getUsersNotesThunk = () => async (dispatch) => {\n  const res = await csrfFetch('/api/notes');\n\n  if (res.ok) {\n    const allUsersNotes = await res.json();\n\n    dispatch(getUserNotes(allUsersNotes));\n  }\n};\n\n// //GET A NOTE\n// const GET_NOTE = \"note/GET_NOTE\";\n\n// const getNote = (note) => ({\n//   type: GET_NOTE,\n//   payload: note,\n// });\n\n// export const getNoteThunk = (noteId) => async (dispatch) => {\n//   const res = await fetch('/api/notes');\n\n//   if (res.ok) {\n//     const note = await res.json();\n//     dispatch(getNote(note));\n//   }\n// };\n\nconst initialState = {};\n\nexport default function notesReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_NOTES: {\n      // return { ...state, notes: action.payload };\n      const allNotes = {}\n    action.allUsersNotes.forEach(note => {\n      allNotes[note.id] = note\n    })  \n    return {\n      ...allNotes\n    }\n    }\n    // case GET_NOTE: {\n    //   return { ...state, note: action.payload };\n    // }\n    default:\n      return state;\n  }\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B,C,CAEA;;AACA,MAAMC,SAAS,GAAG,iBAAlB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,KAAY;EAC/BC,IAAI,EAAEH,SADyB;EAE/BI,OAAO,EAAEF;AAFsB,CAAZ,CAArB;;AAKA,OAAO,MAAMG,kBAAkB,GAAG,MAAM,MAAOC,QAAP,IAAoB;EAC1D,MAAMC,GAAG,GAAG,MAAMR,SAAS,CAAC,YAAD,CAA3B;;EAEA,IAAIQ,GAAG,CAACC,EAAR,EAAY;IACV,MAAMC,aAAa,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAA5B;IAEAJ,QAAQ,CAACL,YAAY,CAACQ,aAAD,CAAb,CAAR;EACD;AACF,CARM,C,CAUP;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAME,YAAY,GAAG,EAArB;AAEA,eAAe,SAASC,YAAT,GAAoD;EAAA,IAA9BC,KAA8B,uEAAtBF,YAAsB;EAAA,IAARG,MAAQ;;EACjE,QAAQA,MAAM,CAACX,IAAf;IACE,KAAKH,SAAL;MAAgB;QACd;QACA,MAAMe,QAAQ,GAAG,EAAjB;QACFD,MAAM,CAACL,aAAP,CAAqBO,OAArB,CAA6BC,IAAI,IAAI;UACnCF,QAAQ,CAACE,IAAI,CAACC,EAAN,CAAR,GAAoBD,IAApB;QACD,CAFD;QAGA,OAAO,EACL,GAAGF;QADE,CAAP;MAGC;IACD;IACA;IACA;;IACA;MACE,OAAOF,KAAP;EAfJ;AAiBD"},"metadata":{},"sourceType":"module"}