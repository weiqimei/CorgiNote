{"ast":null,"code":"import { csrfFetch } from \"./csrf\";\nconst GET_NOTEBOOKS = 'notebooks/GET_NOTEBOOKS';\nconst ADD_NOTEBOOK = 'notebooks/ADD_NOTEBOOK';\n\nconst loadNotebooks = notebooks => ({\n  type: GET_NOTEBOOKS,\n  notebooks\n});\n\nconst addNotebook = notebook => {\n  return {\n    type: ADD_NOTEBOOK,\n    notebook\n  };\n}; // thunk action creator for getting all notebooks\n\n\nexport const getAllNotebooks = () => async dispatch => {\n  const response = await csrfFetch('api/notebooks');\n\n  if (response.ok) {\n    const notebooks = await response.json();\n    dispatch(loadNotebooks(notebooks));\n  }\n}; // thunk action creator for creating a notebook\n\nexport const createNotebook = data => async dispatch => {\n  const response = await csrfFetch('api/notebooks', {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  const notebook = await response.json();\n  dispatch(addNotebook(notebook)); // return response\n};\nconst initialState = {};\n\nconst notebookReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GET_NOTEBOOKS:\n      const allNotebooks = {};\n      action.notebooks.forEach(notebook => {\n        allNotebooks[notebook.id] = notebook;\n      });\n      return { ...allNotebooks\n      };\n\n    case ADD_NOTEBOOK:\n      if (!state[action.notebook.id]) {\n        const newState = { ...state,\n          [action.notebook.id]: action.notebook\n        };\n        const notebooks = newState.notebooks.map(id => newState[id]);\n        notebooks.push(action.notebook);\n        return newState;\n      }\n\n      break;\n\n    default:\n      return state;\n  }\n};\n\nexport default notebookReducer;","map":{"version":3,"names":["csrfFetch","GET_NOTEBOOKS","ADD_NOTEBOOK","loadNotebooks","notebooks","type","addNotebook","notebook","getAllNotebooks","dispatch","response","ok","json","createNotebook","data","method","headers","body","JSON","stringify","initialState","notebookReducer","state","action","allNotebooks","forEach","id","newState","map","push"],"sources":["/Users/weiqi/Mod 5/solo-project/frontend/src/store/notebooks.js"],"sourcesContent":["import { csrfFetch } from \"./csrf\";\n\nconst GET_NOTEBOOKS = 'notebooks/GET_NOTEBOOKS'\nconst ADD_NOTEBOOK = 'notebooks/ADD_NOTEBOOK'\n\nconst loadNotebooks = notebooks => ({\n  type: GET_NOTEBOOKS,\n  notebooks\n})\n\nconst addNotebook = (notebook) => {\n  return {\n    type: ADD_NOTEBOOK,\n    notebook\n  }\n}\n\n// thunk action creator for getting all notebooks\nexport const getAllNotebooks = () => async dispatch => {\n  const response = await csrfFetch('api/notebooks')\n\n  if (response.ok) {\n    const notebooks = await response.json();\n    dispatch(loadNotebooks(notebooks))\n  }\n}\n\n// thunk action creator for creating a notebook\nexport const createNotebook = (data) => async dispatch => {\n  const response = await csrfFetch('api/notebooks', {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  })\n  const notebook = await response.json();\n\n  dispatch(addNotebook(notebook))\n\n  // return response\n}\n\nconst initialState = {}\n\nconst notebookReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_NOTEBOOKS:\n      const allNotebooks = {};\n      action.notebooks.forEach(notebook => {\n        allNotebooks[notebook.id] = notebook\n      })\n      return {\n        ...allNotebooks\n      }\n    case ADD_NOTEBOOK:\n      if (!state[action.notebook.id]) {\n        const newState = {\n          ...state,\n          [action.notebook.id]: action.notebook\n        }\n        const notebooks = newState.notebooks.map(id => newState[id])\n        notebooks.push(action.notebook);\n        return newState\n      }\n      break\n    default:\n      return state;\n  }\n}\n\nexport default notebookReducer\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,aAAa,GAAG,yBAAtB;AACA,MAAMC,YAAY,GAAG,wBAArB;;AAEA,MAAMC,aAAa,GAAGC,SAAS,KAAK;EAClCC,IAAI,EAAEJ,aAD4B;EAElCG;AAFkC,CAAL,CAA/B;;AAKA,MAAME,WAAW,GAAIC,QAAD,IAAc;EAChC,OAAO;IACLF,IAAI,EAAEH,YADD;IAELK;EAFK,CAAP;AAID,CALD,C,CAOA;;;AACA,OAAO,MAAMC,eAAe,GAAG,MAAM,MAAMC,QAAN,IAAkB;EACrD,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,eAAD,CAAhC;;EAEA,IAAIU,QAAQ,CAACC,EAAb,EAAiB;IACf,MAAMP,SAAS,GAAG,MAAMM,QAAQ,CAACE,IAAT,EAAxB;IACAH,QAAQ,CAACN,aAAa,CAACC,SAAD,CAAd,CAAR;EACD;AACF,CAPM,C,CASP;;AACA,OAAO,MAAMS,cAAc,GAAIC,IAAD,IAAU,MAAML,QAAN,IAAkB;EACxD,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAAC,eAAD,EAAkB;IAChDe,MAAM,EAAE,MADwC;IAEhDC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFuC;IAKhDC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;EAL0C,CAAlB,CAAhC;EAOA,MAAMP,QAAQ,GAAG,MAAMG,QAAQ,CAACE,IAAT,EAAvB;EAEAH,QAAQ,CAACH,WAAW,CAACC,QAAD,CAAZ,CAAR,CAVwD,CAYxD;AACD,CAbM;AAeP,MAAMa,YAAY,GAAG,EAArB;;AAEA,MAAMC,eAAe,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBF,YAAyB;EAAA,IAAXG,MAAW;;EACxD,QAAQA,MAAM,CAAClB,IAAf;IACE,KAAKJ,aAAL;MACE,MAAMuB,YAAY,GAAG,EAArB;MACAD,MAAM,CAACnB,SAAP,CAAiBqB,OAAjB,CAAyBlB,QAAQ,IAAI;QACnCiB,YAAY,CAACjB,QAAQ,CAACmB,EAAV,CAAZ,GAA4BnB,QAA5B;MACD,CAFD;MAGA,OAAO,EACL,GAAGiB;MADE,CAAP;;IAGF,KAAKtB,YAAL;MACE,IAAI,CAACoB,KAAK,CAACC,MAAM,CAAChB,QAAP,CAAgBmB,EAAjB,CAAV,EAAgC;QAC9B,MAAMC,QAAQ,GAAG,EACf,GAAGL,KADY;UAEf,CAACC,MAAM,CAAChB,QAAP,CAAgBmB,EAAjB,GAAsBH,MAAM,CAAChB;QAFd,CAAjB;QAIA,MAAMH,SAAS,GAAGuB,QAAQ,CAACvB,SAAT,CAAmBwB,GAAnB,CAAuBF,EAAE,IAAIC,QAAQ,CAACD,EAAD,CAArC,CAAlB;QACAtB,SAAS,CAACyB,IAAV,CAAeN,MAAM,CAAChB,QAAtB;QACA,OAAOoB,QAAP;MACD;;MACD;;IACF;MACE,OAAOL,KAAP;EArBJ;AAuBD,CAxBD;;AA0BA,eAAeD,eAAf"},"metadata":{},"sourceType":"module"}